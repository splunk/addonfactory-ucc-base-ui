name: CI
on:
  push:
    branches:
      - "main"
      - "develop"
      - "release/**"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [main, develop, "release/**"]

jobs:
  meta:
    runs-on: ubuntu-latest
    outputs:
      matrix_supportedSplunk: ${{ steps.matrix.outputs.supportedSplunk }}
    steps:
      - uses: actions/checkout@v3
      - id: matrix
        uses: splunk/addonfactory-test-matrix-action@v1
  fossa-scan:
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: run fossa anlyze and create report
        run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
          fossa analyze --debug
          fossa report attribution --format text > /tmp/THIRDPARTY
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
      - name: upload THIRDPARTY file
        uses: actions/upload-artifact@v3
        with:
          name: THIRDPARTY
          path: /tmp/THIRDPARTY
      - name: run fossa test
        run: |
          fossa test --debug
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}

  compliance-copyrights:
    name: Compliance Copyright Headers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check License Header
        uses: apache/skywalking-eyes@v0.4.0

  semgrep:
    runs-on: ubuntu-latest
    name: security-sast-semgrep
    if: github.actor != 'dependabot[bot]'
    steps:
      - uses: actions/checkout@v3
      - name: Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_PUBLISH_TOKEN }}

  build:
    name: Build Release
    strategy:
      matrix:
        node-version: [14.21.2]
    needs:
      - compliance-copyrights
      - fossa-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          #Very Important semantic-release won't trigger a tagged
          #build if this is not set false
          persist-credentials: false

      - uses: actions/setup-python@v4
        with:
          python-version: "3.7"

      - run: npm install --global yarn

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ matrix.node-version }}

      - uses: actions/download-artifact@v3
        with:
          name: THIRDPARTY

      - run: yarn
      - run: yarn run lint
      - run: yarn run test
      - run: yarn run build
      - run: |
            yarn list --prod --depth 0 | python .github/scripts/format_yarn_deps.py --output-file=dist/package/appserver/static/js/dependencies.txt

      - run: tar -czvf /tmp/splunk-ucc-ui.tgz -C dist .
      - uses: actions/upload-artifact@v3
        with:
          name: splunk-ucc-ui
          path: /tmp/splunk-ucc-ui.tgz

      - name: Semantic Release
        uses: splunk/semantic-release-action@v1.3
        with:
          git_committer_name: ${{ secrets.SA_GH_USER_NAME }}
          git_committer_email: ${{ secrets.SA_GH_USER_EMAIL }}
          gpg_private_key: ${{ secrets.SA_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.SA_GPG_PASSPHRASE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}

  test-ui:
    name: test-ui Splunk ${{ matrix.splunk.version }} -m ${{ matrix.test-mark }}
    if: contains(github.event.pull_request.labels.*.name, 'run-ui-tests')
    runs-on: ubuntu-latest
    continue-on-error: true
    needs:
      - meta
      - build
    strategy:
      matrix:
        splunk: ${{ fromJson(needs.meta.outputs.matrix_supportedSplunk) }}
        test-mark:
          - "logging"
          - "proxy"
          - "account"
          - "custom"
          - "alert"
          - "input"
    steps:
      - uses: actions/checkout@v3
        name: Checkout backend repo addonfactory-ucc-generator
        with:
            repository: splunk/addonfactory-ucc-generator
            path: .
      - uses: actions/setup-python@v4
        with:
          python-version: "3.7"
      - run: curl -sSL https://install.python-poetry.org | python3 - --version 1.4.2
      - run: poetry install
      - name: Link chromedriver
        # Use installed chromedriver https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
        run: |
          export PATH=$PATH:$CHROMEWEBDRIVER
          chromedriver --version
      - name: Download UI artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: splunk-ucc-ui
      - run: |
          tar -zxf splunk-ucc-ui.tgz -C splunk_add_on_ucc_framework/
          poetry build
      - run: poetry run ucc-gen build --source tests/testdata/test_addons/package_global_config_everything/package
      - run: |
          ./run_splunk.sh ${{ matrix.splunk.version }}
          until curl -Lsk "https://localhost:8088/services/collector/health" &>/dev/null ; do echo -n "Waiting for HEC-" && sleep 5 ; done
        timeout-minutes: 5
      - run: poetry run pytest tests/ui -m "${{ matrix.test-mark }}" --headless --junitxml=test-results/junit.xml
      - uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: test-results-ui-${{ matrix.test-mark }}
          path: test-results/*
